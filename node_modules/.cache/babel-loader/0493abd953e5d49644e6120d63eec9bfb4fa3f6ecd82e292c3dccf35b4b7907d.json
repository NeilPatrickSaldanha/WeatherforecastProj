{"ast":null,"code":"import axios from'axios';import{formatWeatherData,formatForecastData}from'./helpers';// Your OpenWeatherMap API key\nconst API_KEY='44463d054f897d96ac24f1aead11948f';const BASE_URL='https://api.openweathermap.org/data/2.5';// Fetch current weather data\nexport const fetchWeatherData=async location=>{try{// Determine if the location is coordinates or a city name\nconst isCoordinates=location.includes(',');let params={units:'metric',appid:API_KEY};if(isCoordinates){const[lat,lon]=location.split(',');params.lat=lat;params.lon=lon;}else{params.q=location;}const response=await axios.get(`${BASE_URL}/weather`,{params});return formatWeatherData(response.data);}catch(error){console.error('Weather API Error:',error);if(error.response){if(error.response.status===404){throw new Error('City not found. Please check the spelling and try again.');}else if(error.response.status===401){throw new Error('API authorization failed. Please check your API key.');}else if(error.response.status===429){throw new Error('Too many requests. Please try again later.');}}throw new Error('Failed to fetch weather data. Please try again later.');}};// Fetch 5-day forecast data\nexport const fetchForecastData=async location=>{try{// Determine if the location is coordinates or a city name\nconst isCoordinates=location.includes(',');let params={units:'metric',appid:API_KEY};if(isCoordinates){const[lat,lon]=location.split(',');params.lat=lat;params.lon=lon;}else{params.q=location;}const response=await axios.get(`${BASE_URL}/forecast`,{params});return formatForecastData(response.data);}catch(error){console.error('Forecast API Error:',error);if(error.response){if(error.response.status===404){throw new Error('Forecast data not available for this location.');}else if(error.response.status===401){throw new Error('API authorization failed. Please check your API key.');}else if(error.response.status===429){throw new Error('Too many requests. Please try again later.');}}throw new Error('Failed to fetch forecast data. Please try again later.');}};// Function to switch between real API and mock data (for development/testing)\nexport const getMockData=function(){let enable=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(enable){return{fetchWeatherData:async city=>{await new Promise(resolve=>setTimeout(resolve,500));return{city:typeof city==='string'&&city.includes(',')?'Current Location':city,country:'Mock Country',temperature:22.5,feelsLike:23.2,condition:'Clear',description:'clear sky',humidity:65,windSpeed:5.2,windDirection:'NE',pressure:1012,time:new Date().toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'}),date:new Date().toLocaleDateString([],{weekday:'long',month:'long',day:'numeric'})};},fetchForecastData:async()=>{await new Promise(resolve=>setTimeout(resolve,500));const days=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];const conditions=['Clear','Partly Cloudy','Cloudy','Rain','Thunderstorm'];const today=new Date();return Array.from({length:5},(_,index)=>{const forecastDate=new Date();forecastDate.setDate(today.getDate()+index+1);return{day:days[forecastDate.getDay()],date:forecastDate.toLocaleDateString('en-US',{month:'short',day:'numeric'}),tempMax:Math.round(20+Math.random()*10),tempMin:Math.round(10+Math.random()*5),condition:conditions[Math.floor(Math.random()*conditions.length)],humidity:Math.round(60+Math.random()*20),windSpeed:Math.round(5+Math.random()*15),precipitation:Math.round(Math.random()*10)};});}};}// Return the actual API functions if mock is disabled\nreturn{fetchWeatherData,fetchForecastData};};// To use mock data, uncomment the following line and update your imports\n// export default getMockData(true);","map":{"version":3,"names":["axios","formatWeatherData","formatForecastData","API_KEY","BASE_URL","fetchWeatherData","location","isCoordinates","includes","params","units","appid","lat","lon","split","q","response","get","data","error","console","status","Error","fetchForecastData","getMockData","enable","arguments","length","undefined","city","Promise","resolve","setTimeout","country","temperature","feelsLike","condition","description","humidity","windSpeed","windDirection","pressure","time","Date","toLocaleTimeString","hour","minute","date","toLocaleDateString","weekday","month","day","days","conditions","today","Array","from","_","index","forecastDate","setDate","getDate","getDay","tempMax","Math","round","random","tempMin","floor","precipitation"],"sources":["C:/Users/user/weatherApp/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { formatWeatherData, formatForecastData } from './helpers';\r\n\r\n// Your OpenWeatherMap API key\r\nconst API_KEY = '44463d054f897d96ac24f1aead11948f';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch current weather data\r\nexport const fetchWeatherData = async (location) => {\r\n  try {\r\n    // Determine if the location is coordinates or a city name\r\n    const isCoordinates = location.includes(',');\r\n    \r\n    let params = {\r\n      units: 'metric',\r\n      appid: API_KEY\r\n    };\r\n    \r\n    if (isCoordinates) {\r\n      const [lat, lon] = location.split(',');\r\n      params.lat = lat;\r\n      params.lon = lon;\r\n    } else {\r\n      params.q = location;\r\n    }\r\n    \r\n    const response = await axios.get(`${BASE_URL}/weather`, { params });\r\n    return formatWeatherData(response.data);\r\n    \r\n  } catch (error) {\r\n    console.error('Weather API Error:', error);\r\n    \r\n    if (error.response) {\r\n      if (error.response.status === 404) {\r\n        throw new Error('City not found. Please check the spelling and try again.');\r\n      } else if (error.response.status === 401) {\r\n        throw new Error('API authorization failed. Please check your API key.');\r\n      } else if (error.response.status === 429) {\r\n        throw new Error('Too many requests. Please try again later.');\r\n      }\r\n    }\r\n    \r\n    throw new Error('Failed to fetch weather data. Please try again later.');\r\n  }\r\n};\r\n\r\n// Fetch 5-day forecast data\r\nexport const fetchForecastData = async (location) => {\r\n  try {\r\n    // Determine if the location is coordinates or a city name\r\n    const isCoordinates = location.includes(',');\r\n    \r\n    let params = {\r\n      units: 'metric',\r\n      appid: API_KEY\r\n    };\r\n    \r\n    if (isCoordinates) {\r\n      const [lat, lon] = location.split(',');\r\n      params.lat = lat;\r\n      params.lon = lon;\r\n    } else {\r\n      params.q = location;\r\n    }\r\n    \r\n    const response = await axios.get(`${BASE_URL}/forecast`, { params });\r\n    return formatForecastData(response.data);\r\n    \r\n  } catch (error) {\r\n    console.error('Forecast API Error:', error);\r\n    \r\n    if (error.response) {\r\n      if (error.response.status === 404) {\r\n        throw new Error('Forecast data not available for this location.');\r\n      } else if (error.response.status === 401) {\r\n        throw new Error('API authorization failed. Please check your API key.');\r\n      } else if (error.response.status === 429) {\r\n        throw new Error('Too many requests. Please try again later.');\r\n      }\r\n    }\r\n    \r\n    throw new Error('Failed to fetch forecast data. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function to switch between real API and mock data (for development/testing)\r\nexport const getMockData = (enable = false) => {\r\n  if (enable) {\r\n    return {\r\n      fetchWeatherData: async (city) => {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        return {\r\n          city: typeof city === 'string' && city.includes(',') ? 'Current Location' : city,\r\n          country: 'Mock Country',\r\n          temperature: 22.5,\r\n          feelsLike: 23.2,\r\n          condition: 'Clear',\r\n          description: 'clear sky',\r\n          humidity: 65,\r\n          windSpeed: 5.2,\r\n          windDirection: 'NE',\r\n          pressure: 1012,\r\n          time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n          date: new Date().toLocaleDateString([], { weekday: 'long', month: 'long', day: 'numeric' })\r\n        };\r\n      },\r\n      \r\n      fetchForecastData: async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        const conditions = ['Clear', 'Partly Cloudy', 'Cloudy', 'Rain', 'Thunderstorm'];\r\n        \r\n        const today = new Date();\r\n        \r\n        return Array.from({ length: 5 }, (_, index) => {\r\n          const forecastDate = new Date();\r\n          forecastDate.setDate(today.getDate() + index + 1);\r\n          \r\n          return {\r\n            day: days[forecastDate.getDay()],\r\n            date: forecastDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n            tempMax: Math.round(20 + Math.random() * 10),\r\n            tempMin: Math.round(10 + Math.random() * 5),\r\n            condition: conditions[Math.floor(Math.random() * conditions.length)],\r\n            humidity: Math.round(60 + Math.random() * 20),\r\n            windSpeed: Math.round(5 + Math.random() * 15),\r\n            precipitation: Math.round(Math.random() * 10)\r\n          };\r\n        });\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Return the actual API functions if mock is disabled\r\n  return { fetchWeatherData, fetchForecastData };\r\n};\r\n\r\n// To use mock data, uncomment the following line and update your imports\r\n// export default getMockData(true);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,iBAAiB,CAAEC,kBAAkB,KAAQ,WAAW,CAEjE;AACA,KAAM,CAAAC,OAAO,CAAG,kCAAkC,CAClD,KAAM,CAAAC,QAAQ,CAAG,yCAAyC,CAE1D;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAClD,GAAI,CACF;AACA,KAAM,CAAAC,aAAa,CAAGD,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,CAE5C,GAAI,CAAAC,MAAM,CAAG,CACXC,KAAK,CAAE,QAAQ,CACfC,KAAK,CAAER,OACT,CAAC,CAED,GAAII,aAAa,CAAE,CACjB,KAAM,CAACK,GAAG,CAAEC,GAAG,CAAC,CAAGP,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC,CACtCL,MAAM,CAACG,GAAG,CAAGA,GAAG,CAChBH,MAAM,CAACI,GAAG,CAAGA,GAAG,CAClB,CAAC,IAAM,CACLJ,MAAM,CAACM,CAAC,CAAGT,QAAQ,CACrB,CAEA,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAhB,KAAK,CAACiB,GAAG,CAAC,GAAGb,QAAQ,UAAU,CAAE,CAAEK,MAAO,CAAC,CAAC,CACnE,MAAO,CAAAR,iBAAiB,CAACe,QAAQ,CAACE,IAAI,CAAC,CAEzC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAE1C,GAAIA,KAAK,CAACH,QAAQ,CAAE,CAClB,GAAIG,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAK,GAAG,CAAE,CACjC,KAAM,IAAI,CAAAC,KAAK,CAAC,0DAA0D,CAAC,CAC7E,CAAC,IAAM,IAAIH,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAK,GAAG,CAAE,CACxC,KAAM,IAAI,CAAAC,KAAK,CAAC,sDAAsD,CAAC,CACzE,CAAC,IAAM,IAAIH,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAK,GAAG,CAAE,CACxC,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACF,CAEA,KAAM,IAAI,CAAAA,KAAK,CAAC,uDAAuD,CAAC,CAC1E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,iBAAiB,CAAG,KAAO,CAAAjB,QAAQ,EAAK,CACnD,GAAI,CACF;AACA,KAAM,CAAAC,aAAa,CAAGD,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,CAE5C,GAAI,CAAAC,MAAM,CAAG,CACXC,KAAK,CAAE,QAAQ,CACfC,KAAK,CAAER,OACT,CAAC,CAED,GAAII,aAAa,CAAE,CACjB,KAAM,CAACK,GAAG,CAAEC,GAAG,CAAC,CAAGP,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC,CACtCL,MAAM,CAACG,GAAG,CAAGA,GAAG,CAChBH,MAAM,CAACI,GAAG,CAAGA,GAAG,CAClB,CAAC,IAAM,CACLJ,MAAM,CAACM,CAAC,CAAGT,QAAQ,CACrB,CAEA,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAhB,KAAK,CAACiB,GAAG,CAAC,GAAGb,QAAQ,WAAW,CAAE,CAAEK,MAAO,CAAC,CAAC,CACpE,MAAO,CAAAP,kBAAkB,CAACc,QAAQ,CAACE,IAAI,CAAC,CAE1C,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAE3C,GAAIA,KAAK,CAACH,QAAQ,CAAE,CAClB,GAAIG,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAK,GAAG,CAAE,CACjC,KAAM,IAAI,CAAAC,KAAK,CAAC,gDAAgD,CAAC,CACnE,CAAC,IAAM,IAAIH,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAK,GAAG,CAAE,CACxC,KAAM,IAAI,CAAAC,KAAK,CAAC,sDAAsD,CAAC,CACzE,CAAC,IAAM,IAAIH,KAAK,CAACH,QAAQ,CAACK,MAAM,GAAK,GAAG,CAAE,CACxC,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACF,CAEA,KAAM,IAAI,CAAAA,KAAK,CAAC,wDAAwD,CAAC,CAC3E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,WAAW,CAAG,QAAAA,CAAA,CAAoB,IAAnB,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CACxC,GAAID,MAAM,CAAE,CACV,MAAO,CACLpB,gBAAgB,CAAE,KAAO,CAAAwB,IAAI,EAAK,CAChC,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAEtD,MAAO,CACLF,IAAI,CAAE,MAAO,CAAAA,IAAI,GAAK,QAAQ,EAAIA,IAAI,CAACrB,QAAQ,CAAC,GAAG,CAAC,CAAG,kBAAkB,CAAGqB,IAAI,CAChFI,OAAO,CAAE,cAAc,CACvBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,SAAS,CAAE,OAAO,CAClBC,WAAW,CAAE,WAAW,CACxBC,QAAQ,CAAE,EAAE,CACZC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,IAAI,CACnBC,QAAQ,CAAE,IAAI,CACdC,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,EAAE,CAAE,CAAEC,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAC,CAC/EC,IAAI,CAAE,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAACK,kBAAkB,CAAC,EAAE,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAEC,KAAK,CAAE,MAAM,CAAEC,GAAG,CAAE,SAAU,CAAC,CAC5F,CAAC,CACH,CAAC,CAED5B,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,KAAM,IAAI,CAAAO,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAEtD,KAAM,CAAAqB,IAAI,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CAC9D,KAAM,CAAAC,UAAU,CAAG,CAAC,OAAO,CAAE,eAAe,CAAE,QAAQ,CAAE,MAAM,CAAE,cAAc,CAAC,CAE/E,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAX,IAAI,CAAC,CAAC,CAExB,MAAO,CAAAY,KAAK,CAACC,IAAI,CAAC,CAAE7B,MAAM,CAAE,CAAE,CAAC,CAAE,CAAC8B,CAAC,CAAEC,KAAK,GAAK,CAC7C,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAhB,IAAI,CAAC,CAAC,CAC/BgB,YAAY,CAACC,OAAO,CAACN,KAAK,CAACO,OAAO,CAAC,CAAC,CAAGH,KAAK,CAAG,CAAC,CAAC,CAEjD,MAAO,CACLP,GAAG,CAAEC,IAAI,CAACO,YAAY,CAACG,MAAM,CAAC,CAAC,CAAC,CAChCf,IAAI,CAAEY,YAAY,CAACX,kBAAkB,CAAC,OAAO,CAAE,CAAEE,KAAK,CAAE,OAAO,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAC,CAClFY,OAAO,CAAEC,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC5CC,OAAO,CAAEH,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAC3C9B,SAAS,CAAEiB,UAAU,CAACW,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGb,UAAU,CAAC1B,MAAM,CAAC,CAAC,CACpEW,QAAQ,CAAE0B,IAAI,CAACC,KAAK,CAAC,EAAE,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC7C3B,SAAS,CAAEyB,IAAI,CAACC,KAAK,CAAC,CAAC,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC7CG,aAAa,CAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAC9C,CAAC,CACH,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CAEA;AACA,MAAO,CAAE7D,gBAAgB,CAAEkB,iBAAkB,CAAC,CAChD,CAAC,CAED;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}