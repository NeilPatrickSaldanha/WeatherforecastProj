{"ast":null,"code":"import axios from 'axios';\nimport { formatWeatherData, formatForecastData } from './helpers';\n\n// Your OpenWeatherMap API key\nconst API_KEY = '44463d054f897d96ac24f1aead11948f';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch current weather data\nexport const fetchWeatherData = async location => {\n  try {\n    // Determine if the location is coordinates or a city name\n    const isCoordinates = location.includes(',');\n    let params = {\n      units: 'metric',\n      appid: API_KEY\n    };\n    if (isCoordinates) {\n      const [lat, lon] = location.split(',');\n      params.lat = lat;\n      params.lon = lon;\n    } else {\n      params.q = location;\n    }\n    const response = await axios.get(`${BASE_URL}/weather`, {\n      params\n    });\n    return formatWeatherData(response.data);\n  } catch (error) {\n    console.error('Weather API Error:', error);\n    if (error.response) {\n      if (error.response.status === 404) {\n        throw new Error('City not found. Please check the spelling and try again.');\n      } else if (error.response.status === 401) {\n        throw new Error('API authorization failed. Please check your API key.');\n      } else if (error.response.status === 429) {\n        throw new Error('Too many requests. Please try again later.');\n      }\n    }\n    throw new Error('Failed to fetch weather data. Please try again later.');\n  }\n};\n\n// Fetch 5-day forecast data\nexport const fetchForecastData = async location => {\n  try {\n    // Determine if the location is coordinates or a city name\n    const isCoordinates = location.includes(',');\n    let params = {\n      units: 'metric',\n      appid: API_KEY\n    };\n    if (isCoordinates) {\n      const [lat, lon] = location.split(',');\n      params.lat = lat;\n      params.lon = lon;\n    } else {\n      params.q = location;\n    }\n    const response = await axios.get(`${BASE_URL}/forecast`, {\n      params\n    });\n    return formatForecastData(response.data);\n  } catch (error) {\n    console.error('Forecast API Error:', error);\n    if (error.response) {\n      if (error.response.status === 404) {\n        throw new Error('Forecast data not available for this location.');\n      } else if (error.response.status === 401) {\n        throw new Error('API authorization failed. Please check your API key.');\n      } else if (error.response.status === 429) {\n        throw new Error('Too many requests. Please try again later.');\n      }\n    }\n    throw new Error('Failed to fetch forecast data. Please try again later.');\n  }\n};\n\n// Function to switch between real API and mock data (for development/testing)\nexport const getMockData = (enable = false) => {\n  if (enable) {\n    return {\n      fetchWeatherData: async city => {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return {\n          city: typeof city === 'string' && city.includes(',') ? 'Current Location' : city,\n          country: 'Mock Country',\n          temperature: 22.5,\n          feelsLike: 23.2,\n          condition: 'Clear',\n          description: 'clear sky',\n          humidity: 65,\n          windSpeed: 5.2,\n          windDirection: 'NE',\n          pressure: 1012,\n          time: new Date().toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          }),\n          date: new Date().toLocaleDateString([], {\n            weekday: 'long',\n            month: 'long',\n            day: 'numeric'\n          })\n        };\n      },\n      fetchForecastData: async () => {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        const conditions = ['Clear', 'Partly Cloudy', 'Cloudy', 'Rain', 'Thunderstorm'];\n        const today = new Date();\n        return Array.from({\n          length: 5\n        }, (_, index) => {\n          const forecastDate = new Date();\n          forecastDate.setDate(today.getDate() + index + 1);\n          return {\n            day: days[forecastDate.getDay()],\n            date: forecastDate.toLocaleDateString('en-US', {\n              month: 'short',\n              day: 'numeric'\n            }),\n            tempMax: Math.round(20 + Math.random() * 10),\n            tempMin: Math.round(10 + Math.random() * 5),\n            condition: conditions[Math.floor(Math.random() * conditions.length)],\n            humidity: Math.round(60 + Math.random() * 20),\n            windSpeed: Math.round(5 + Math.random() * 15),\n            precipitation: Math.round(Math.random() * 10)\n          };\n        });\n      }\n    };\n  }\n\n  // Return the actual API functions if mock is disabled\n  return {\n    fetchWeatherData,\n    fetchForecastData\n  };\n};\n\n// To use mock data, uncomment the following line and update your imports\n// export default getMockData(true);","map":{"version":3,"names":["axios","formatWeatherData","formatForecastData","API_KEY","BASE_URL","fetchWeatherData","location","isCoordinates","includes","params","units","appid","lat","lon","split","q","response","get","data","error","console","status","Error","fetchForecastData","getMockData","enable","city","Promise","resolve","setTimeout","country","temperature","feelsLike","condition","description","humidity","windSpeed","windDirection","pressure","time","Date","toLocaleTimeString","hour","minute","date","toLocaleDateString","weekday","month","day","days","conditions","today","Array","from","length","_","index","forecastDate","setDate","getDate","getDay","tempMax","Math","round","random","tempMin","floor","precipitation"],"sources":["C:/Users/user/weather-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { formatWeatherData, formatForecastData } from './helpers';\r\n\r\n// Your OpenWeatherMap API key\r\nconst API_KEY = '44463d054f897d96ac24f1aead11948f';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch current weather data\r\nexport const fetchWeatherData = async (location) => {\r\n  try {\r\n    // Determine if the location is coordinates or a city name\r\n    const isCoordinates = location.includes(',');\r\n    \r\n    let params = {\r\n      units: 'metric',\r\n      appid: API_KEY\r\n    };\r\n    \r\n    if (isCoordinates) {\r\n      const [lat, lon] = location.split(',');\r\n      params.lat = lat;\r\n      params.lon = lon;\r\n    } else {\r\n      params.q = location;\r\n    }\r\n    \r\n    const response = await axios.get(`${BASE_URL}/weather`, { params });\r\n    return formatWeatherData(response.data);\r\n    \r\n  } catch (error) {\r\n    console.error('Weather API Error:', error);\r\n    \r\n    if (error.response) {\r\n      if (error.response.status === 404) {\r\n        throw new Error('City not found. Please check the spelling and try again.');\r\n      } else if (error.response.status === 401) {\r\n        throw new Error('API authorization failed. Please check your API key.');\r\n      } else if (error.response.status === 429) {\r\n        throw new Error('Too many requests. Please try again later.');\r\n      }\r\n    }\r\n    \r\n    throw new Error('Failed to fetch weather data. Please try again later.');\r\n  }\r\n};\r\n\r\n// Fetch 5-day forecast data\r\nexport const fetchForecastData = async (location) => {\r\n  try {\r\n    // Determine if the location is coordinates or a city name\r\n    const isCoordinates = location.includes(',');\r\n    \r\n    let params = {\r\n      units: 'metric',\r\n      appid: API_KEY\r\n    };\r\n    \r\n    if (isCoordinates) {\r\n      const [lat, lon] = location.split(',');\r\n      params.lat = lat;\r\n      params.lon = lon;\r\n    } else {\r\n      params.q = location;\r\n    }\r\n    \r\n    const response = await axios.get(`${BASE_URL}/forecast`, { params });\r\n    return formatForecastData(response.data);\r\n    \r\n  } catch (error) {\r\n    console.error('Forecast API Error:', error);\r\n    \r\n    if (error.response) {\r\n      if (error.response.status === 404) {\r\n        throw new Error('Forecast data not available for this location.');\r\n      } else if (error.response.status === 401) {\r\n        throw new Error('API authorization failed. Please check your API key.');\r\n      } else if (error.response.status === 429) {\r\n        throw new Error('Too many requests. Please try again later.');\r\n      }\r\n    }\r\n    \r\n    throw new Error('Failed to fetch forecast data. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function to switch between real API and mock data (for development/testing)\r\nexport const getMockData = (enable = false) => {\r\n  if (enable) {\r\n    return {\r\n      fetchWeatherData: async (city) => {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        return {\r\n          city: typeof city === 'string' && city.includes(',') ? 'Current Location' : city,\r\n          country: 'Mock Country',\r\n          temperature: 22.5,\r\n          feelsLike: 23.2,\r\n          condition: 'Clear',\r\n          description: 'clear sky',\r\n          humidity: 65,\r\n          windSpeed: 5.2,\r\n          windDirection: 'NE',\r\n          pressure: 1012,\r\n          time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n          date: new Date().toLocaleDateString([], { weekday: 'long', month: 'long', day: 'numeric' })\r\n        };\r\n      },\r\n      \r\n      fetchForecastData: async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        const conditions = ['Clear', 'Partly Cloudy', 'Cloudy', 'Rain', 'Thunderstorm'];\r\n        \r\n        const today = new Date();\r\n        \r\n        return Array.from({ length: 5 }, (_, index) => {\r\n          const forecastDate = new Date();\r\n          forecastDate.setDate(today.getDate() + index + 1);\r\n          \r\n          return {\r\n            day: days[forecastDate.getDay()],\r\n            date: forecastDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n            tempMax: Math.round(20 + Math.random() * 10),\r\n            tempMin: Math.round(10 + Math.random() * 5),\r\n            condition: conditions[Math.floor(Math.random() * conditions.length)],\r\n            humidity: Math.round(60 + Math.random() * 20),\r\n            windSpeed: Math.round(5 + Math.random() * 15),\r\n            precipitation: Math.round(Math.random() * 10)\r\n          };\r\n        });\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Return the actual API functions if mock is disabled\r\n  return { fetchWeatherData, fetchForecastData };\r\n};\r\n\r\n// To use mock data, uncomment the following line and update your imports\r\n// export default getMockData(true);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}