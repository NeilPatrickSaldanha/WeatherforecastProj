{"ast":null,"code":"import axios from 'axios';\nimport { formatWeatherData, formatForecastData } from './helpers';\n\n// Replace with your own API key from OpenWeatherMap\nconst API_KEY = '44463d054f897d96ac24f1aead11948f';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch current weather data\nexport const fetchWeatherData = async city => {\n  try {\n    const response = await axios.get(`${BASE_URL}/weather`, {\n      params: {\n        q: city,\n        units: 'metric',\n        appid: API_KEY\n      }\n    });\n    return formatWeatherData(response.data);\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      throw new Error('City not found. Please check the spelling and try again.');\n    } else {\n      throw new Error('Failed to fetch weather data. Please try again later.');\n    }\n  }\n};\n\n// Fetch 5-day forecast data\nexport const fetchForecastData = async city => {\n  try {\n    const response = await axios.get(`${BASE_URL}/forecast`, {\n      params: {\n        q: city,\n        units: 'metric',\n        appid: API_KEY\n      }\n    });\n    return formatForecastData(response.data);\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      throw new Error('Forecast data not available for this location.');\n    } else {\n      throw new Error('Failed to fetch forecast data. Please try again later.');\n    }\n  }\n};\n\n// Function to enable using mock data for development/testing\nexport const useMockData = (enable = false) => {\n  if (enable) {\n    // Override the actual API functions with mock data\n    return {\n      fetchWeatherData: async city => {\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return {\n          city: city,\n          country: 'Mock Country',\n          temperature: 22.5,\n          feelsLike: 23.2,\n          condition: 'Clear',\n          description: 'clear sky',\n          humidity: 65,\n          windSpeed: 5.2,\n          windDirection: 'NE',\n          pressure: 1012,\n          time: new Date().toLocaleTimeString(),\n          date: new Date().toLocaleDateString()\n        };\n      },\n      fetchForecastData: async () => {\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Generate mock forecast for 5 days\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        const conditions = ['Clear', 'Partly Cloudy', 'Cloudy', 'Rain', 'Thunderstorm'];\n        const today = new Date();\n        return Array.from({\n          length: 5\n        }, (_, index) => {\n          const forecastDate = new Date();\n          forecastDate.setDate(today.getDate() + index + 1);\n          return {\n            day: days[forecastDate.getDay()],\n            date: forecastDate.toLocaleDateString('en-US', {\n              month: 'short',\n              day: 'numeric'\n            }),\n            tempMax: Math.round(20 + Math.random() * 10),\n            tempMin: Math.round(10 + Math.random() * 5),\n            condition: conditions[Math.floor(Math.random() * conditions.length)],\n            humidity: Math.round(60 + Math.random() * 20),\n            windSpeed: Math.round(5 + Math.random() * 15),\n            precipitation: Math.round(Math.random() * 10)\n          };\n        });\n      }\n    };\n  }\n\n  // Return the actual API functions if mock is disabled\n  return {\n    fetchWeatherData,\n    fetchForecastData\n  };\n};","map":{"version":3,"names":["axios","formatWeatherData","formatForecastData","API_KEY","BASE_URL","fetchWeatherData","city","response","get","params","q","units","appid","data","error","status","Error","fetchForecastData","useMockData","enable","Promise","resolve","setTimeout","country","temperature","feelsLike","condition","description","humidity","windSpeed","windDirection","pressure","time","Date","toLocaleTimeString","date","toLocaleDateString","days","conditions","today","Array","from","length","_","index","forecastDate","setDate","getDate","day","getDay","month","tempMax","Math","round","random","tempMin","floor","precipitation"],"sources":["C:/Users/user/weather-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { formatWeatherData, formatForecastData } from './helpers';\r\n\r\n// Replace with your own API key from OpenWeatherMap\r\nconst API_KEY = '44463d054f897d96ac24f1aead11948f';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch current weather data\r\nexport const fetchWeatherData = async (city) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/weather`, {\r\n      params: {\r\n        q: city,\r\n        units: 'metric',\r\n        appid: API_KEY\r\n      }\r\n    });\r\n    \r\n    return formatWeatherData(response.data);\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      throw new Error('City not found. Please check the spelling and try again.');\r\n    } else {\r\n      throw new Error('Failed to fetch weather data. Please try again later.');\r\n    }\r\n  }\r\n};\r\n\r\n// Fetch 5-day forecast data\r\nexport const fetchForecastData = async (city) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/forecast`, {\r\n      params: {\r\n        q: city,\r\n        units: 'metric',\r\n        appid: API_KEY\r\n      }\r\n    });\r\n    \r\n    return formatForecastData(response.data);\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      throw new Error('Forecast data not available for this location.');\r\n    } else {\r\n      throw new Error('Failed to fetch forecast data. Please try again later.');\r\n    }\r\n  }\r\n};\r\n\r\n// Function to enable using mock data for development/testing\r\nexport const useMockData = (enable = false) => {\r\n  if (enable) {\r\n    // Override the actual API functions with mock data\r\n    return {\r\n      fetchWeatherData: async (city) => {\r\n        // Simulate API delay\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        return {\r\n          city: city,\r\n          country: 'Mock Country',\r\n          temperature: 22.5,\r\n          feelsLike: 23.2,\r\n          condition: 'Clear',\r\n          description: 'clear sky',\r\n          humidity: 65,\r\n          windSpeed: 5.2,\r\n          windDirection: 'NE',\r\n          pressure: 1012,\r\n          time: new Date().toLocaleTimeString(),\r\n          date: new Date().toLocaleDateString()\r\n        };\r\n      },\r\n      fetchForecastData: async () => {\r\n        // Simulate API delay\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        // Generate mock forecast for 5 days\r\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        const conditions = ['Clear', 'Partly Cloudy', 'Cloudy', 'Rain', 'Thunderstorm'];\r\n        \r\n        const today = new Date();\r\n        \r\n        return Array.from({ length: 5 }, (_, index) => {\r\n          const forecastDate = new Date();\r\n          forecastDate.setDate(today.getDate() + index + 1);\r\n          \r\n          return {\r\n            day: days[forecastDate.getDay()],\r\n            date: forecastDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n            tempMax: Math.round(20 + Math.random() * 10),\r\n            tempMin: Math.round(10 + Math.random() * 5),\r\n            condition: conditions[Math.floor(Math.random() * conditions.length)],\r\n            humidity: Math.round(60 + Math.random() * 20),\r\n            windSpeed: Math.round(5 + Math.random() * 15),\r\n            precipitation: Math.round(Math.random() * 10)\r\n          };\r\n        });\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Return the actual API functions if mock is disabled\r\n  return { fetchWeatherData, fetchForecastData };\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}